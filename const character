// create an object to store user data
const users = {};

// function to generate unique user IDs
function generateUserId() {
  let userId = '';
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  for (let i = 0; i < 6; i++) {
    userId += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return userId;
}

// function to add a new user
function addUser(phoneNumber, firstName, lastName) {
  const userId = generateUserId();
  users[phoneNumber] = {
    id: userId,
    firstName: firstName,
    lastName: lastName,
    elo: 1500 // set initial Elo rating to 1500
  };
  return userId;
}

// function to get user data
function getUser(phoneNumber) {
  return users[phoneNumber];
}

// function to add a user to a game
function joinGame(gameName, phoneNumber, elo) {
  const game = games[gameName];
  if (!game) {
    return 'Invalid game name.';
  }
  const user = getUser(phoneNumber);
  if (!user) {
    return 'User not found.';
  }
  const existingPlayer = game.players.find(player => player.userId === user.id);
  if (existingPlayer) {
    return 'User is already in this game.';
  }
  if (game.players.length >= 4) {
    return 'This game is already full.';
  }
  game.players.push({
    userId: user.id,
    firstName: user.firstName,
    lastName: user.lastName,
    elo: elo
  });
  return 'User successfully joined the game.';
}

// function to calculate Elo ratings after a match
function calculateEloRating(winnerElo, loserElo) {
  const kFactor = 32; // use 32 as the K-factor for beginners
  const winnerExpectedScore = 1 / (1 + 10 ** ((loserElo - winnerElo) / 400));
  const loserExpectedScore = 1 - winnerExpectedScore;
  const winnerNewElo = Math.round(winnerElo + kFactor * (1 - winnerExpectedScore));
  const loserNewElo = Math.round(loserElo + kFactor * (0 - loserExpectedScore));
  return [winnerNewElo, loserNewElo];
}

// object to store game data
const games = {
  Game1: {
    players: [],
    matchTime: '10:00',
    courts: ['M4', 'M5', 'M6']
  },
  Game2: {
    players: [],
    matchTime: '12:00',
    courts: ['M1', 'M2', 'M3']
  }
};

// function to send game schedule to a group
function sendGameSchedule() {
  const gameSchedule = Object.entries(games).map(([gameName, game]) => {
    const playerList = game.players.map(player => `${player.firstName} ${player.lastName} (${player.elo})`).join(', ');
    const courtList = game.courts.join(', ');
    return `${gameName}\n${game.matchTime}\n${courtList}\nPlayers: ${playerList}`;
  }).join('\n\n');
  // send game schedule to group
  sendMessageToGroup('+351936836204', 'Andr√© Silva', gameSchedule);
}

// function to handle incoming messages
function handleMessage(phoneNumber, message) {
  const user = getUser(phoneNumber
